import serial
import struct
import time

PORT = 'COM4'       # Change to your serial port
BAUDRATE = 115200
NUM_FLOATS = 141

# Your actual float data array here:
normal_values = [
    -0.032245388, -0.54504988, -0.82233951, -1.6050845, -1.8057748, -2.0080666,
    -2.2339748, -2.191458, -2.0580713, -1.8808487, -1.5980847, -1.0734666,
    -0.60601763, -0.40062774, -0.30974032, -0.27599315, -0.16190422, 0.10850521,
    0.30977527, 0.41252896, 0.53814803, 0.54247379, 0.42785112, 0.37815942,
    0.36188738, 0.37976272, 0.45375055, 0.5483923, 0.67794169, 0.66825595,
    0.4131611, 0.22767328, 0.27982432, 0.35898388, 0.40398305, 0.43035215,
    0.40867432, 0.42049766, 0.42107193, 0.32161806, 0.22971489, 0.20655718,
    0.22594547, 0.34068889, 0.44956444, 0.40496562, 0.30956912, 0.24239092,
    0.17865089, 0.18501601, 0.33981574, 0.51298385, 0.47234082, 0.24335581,
    0.082250646, 0.041823061, 0.04329214, 0.16040296, 0.26450173, 0.21102713,
    0.22029886, 0.31735332, 0.31367233, 0.31088657, 0.38498299, 0.36784817,
    0.2984939, 0.31753582, 0.32696731, 0.29884615, 0.3674174, 0.47894802,
    0.51140793, 0.49840732, 0.49130584, 0.50073549, 0.49360933, 0.53874692,
    0.63148766, 0.57849716, 0.53415701, 0.6395139, 0.67505033, 0.5978203,
    0.48834268, 0.39688329, 0.42172264, 0.51001168, 0.55461096, 0.59630145,
    0.57140413, 0.45837937, 0.44734872, 0.50965739, 0.53081508, 0.51322441,
    0.46546407, 0.49637166, 0.60659122, 0.66603659, 0.62919292, 0.54553078,
    0.54543892, 0.60964795, 0.59777943, 0.57261331, 0.60459362, 0.57085274,
    0.48861488, 0.48893631, 0.51936437, 0.55129762, 0.61166333, 0.61427183,
    0.55032934, 0.48756962, 0.41517402, 0.39897417, 0.53464846, 0.66442392,
    0.63454566, 0.56613755, 0.47991327, 0.29107729, 0.10251066, 0.018347409,
    0.043036237, 0.038287591, -0.168029, -0.44347067, -0.90642467, -1.6213757,
    -2.3290905, -3.0498941, -3.6204134, -4.2104818, -4.043785, -3.0518127,
    -2.8068663, -0.87966639, -0.032245388
]
anomaly_values = [
    -0.11252183,-2.8272038,-3.7738969,-4.3497511,-4.376041,-3.4749863,
    -2.1814082,-1.8182865,-1.2505219,-0.47749208,-0.36380791,-0.49195659,
    -0.42185509,-0.30920086,-0.4959387,-0.34211867,-0.35533627,-0.36791303,
    -0.31650279,-0.41237405,-0.47167181,-0.41345783,-0.36461703,-0.44929829,
    -0.47141866,-0.42477658,-0.46251673,-0.55247236,-0.47537519,-0.6942,
    -0.7018681,-0.59381178,-0.66068415,-0.71383066,-0.76980688,-0.67228161,
    -0.65367605,-0.63940562,-0.55930228,-0.59167032,-0.49322332,-0.46305183,
    -0.30164382,-0.23273401,-0.12505488,-0.15394314,-0.024357404,-0.065608758,
    0.034999258,0.061935219,0.07119542,0.12392505,0.10312371,0.22522849,
    0.12868305,0.30248315,0.25727621,0.19635161,0.17938297,0.24472863,
    0.34121687,0.32820441,0.40604169,0.44660507,0.42406823,0.48151204,
    0.4778438,0.62408259,0.57458456,0.59801319,0.5645919,0.607979,
    0.62063457,0.65625291,0.68474806,0.69427284,0.66558377,0.57579577,
    0.63813479,0.61491695,0.56908343,0.46857572,0.44281777,0.46827436,
    0.43249295,0.40795792,0.41862256,0.36253075,0.41095901,0.47166633,
    0.37216676,0.33787543,0.22140511,0.27399747,0.29866408,0.26356357,
    0.34256352,0.41950529,0.58660736,0.86062387,1.1733446,1.2581791,
    1.4337887,1.7005334,1.9990431,2.1253411,1.9932907,1.9322463,
    1.7974367,1.5222839,1.2511679,0.99873034,0.48372242,0.023132292,
    -0.19491383,-0.22091729,-0.24373668,-0.25469462,-0.29113555,-0.25649034,
    -0.22787425,-0.32242276,-0.28928586,-0.31816951,-0.36365359,-0.39345584,
    -0.26641886,-0.25682316,-0.28869399,-0.16233755,0.16034772,0.79216787,
    0.93354122,0.79695779,0.57862066,0.2577399,0.22807718,0.12343082,
    0.92528624,0.19313742,0.7921678
]
test_values = [10.0] * 141

def send_and_hold_open(data_type):
    if data_type == 'normal':
        float_values = normal_values
    elif data_type == 'anomaly':
        float_values = anomaly_values
    elif data_type == 'test':
        float_values = test_values
    else:
        raise ValueError("Expected one of: 'normal', 'anomaly', 'test'.")

    ser = serial.Serial(PORT, BAUDRATE, timeout=None)
    time.sleep(2)  # Let MCU settle

    ser.reset_input_buffer()
    ser.reset_output_buffer()

    # Send one float at a time (4 bytes each)
    for i, val in enumerate(float_values):
        b = struct.pack('<f', val)
        ser.write(b)
        ser.flush()
        time.sleep(0.001)  # slight delay (1ms) to help MCU keep up

    print("‚úÖ All floats sent. Port is held open. Waiting for MCU response...")

    try:
        while True:
            if ser.in_waiting >= 2:
                response = ser.read(2)
                print("üì¨ Report bytes:", response)
                print("Status:", response[0])
                print("Similarity:", response[1])
                break
            time.sleep(0.05)
    except KeyboardInterrupt:
        print("‚ùå Interrupted.")
    finally:
        ser.close()
        print("üîí Port closed.")

# Main loop: normal then anomaly
if __name__ == '__main__':
    send_and_hold_open('normal')
    time.sleep(1)  # allow brief delay between cases
    send_and_hold_open('anomaly')
    #time.sleep(1)  # allow brief delay between cases
    #send_and_receive('test')